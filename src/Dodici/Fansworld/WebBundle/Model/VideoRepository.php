<?php

namespace Dodici\Fansworld\WebBundle\Model;

use Dodici\Fansworld\WebBundle\Entity\Privacy;

use Dodici\Fansworld\WebBundle\Entity\Tag;

use Application\Sonata\UserBundle\Entity\User;

use Doctrine\ORM\EntityRepository;

/**
 * VideoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VideoRepository extends CountBaseRepository
{
	/**
	 * Search videos by text, visible to the user
	 * @param User $user
	 * @param string $searchterm
	 * @param int $limit
	 * @param int $offset
	 */
	public function searchText($searchterm=null, $user=null, $limit=null, $offset=null)
	{
		
		$query = $this->_em->createQuery('
    	SELECT v, va
    	FROM \Dodici\Fansworld\WebBundle\Entity\Video v
    	LEFT JOIN v.author va
    	WHERE v.active = true
    	AND
    	(:searchterm IS NULL OR (
    		(v.title LIKE :searchlike)
    		OR
    		(v.content LIKE :searchlike)
    		OR
    		(v.id IN (SELECT vhtv.id FROM \Dodici\Fansworld\WebBundle\Entity\HasTag vht INNER JOIN vht.video vhtv INNER JOIN vht.tag vhtt WITH vhtt.title = :searchterm))
    	))
    	AND
    	(
    		(v.privacy = :everyone)
    		OR
	    	(v.privacy = :friendsonly AND (:user IS NOT NULL) AND (
	    		(SELECT f.active FROM \Dodici\Fansworld\WebBundle\Entity\Friendship f WHERE (f.author = v.author AND f.target = :user) OR (f.target = v.author AND f.author = :user)) = true
	    	))
    	)
    	ORDER BY v.createdAt DESC
    	')
        	->setParameter('searchterm', $searchterm)
        	->setParameter('searchlike', '%'.$searchterm.'%')
        	->setParameter('everyone', Privacy::EVERYONE)
        	->setParameter('friendsonly', Privacy::FRIENDS_ONLY)
        	->setParameter('user', ($user instanceof User) ? $user->getId() : null);
        
        if ($limit !== null)
            $query = $query->setMaxResults((int)$limit);
        if ($offset !== null)
            $query = $query->setFirstResult((int)$offset);
        
        return $query->getResult();
	}
	
	/**
	 * Search videos by tag, visible to the user
	 * @param User $user
	 * @param Tag $tag
	 * @param int $limit
	 * @param int $offset
	 */
	public function byTag(Tag $tag, $user=null, $limit=null, $offset=null)
	{
		
		$query = $this->_em->createQuery('
    	SELECT v, va
    	FROM \Dodici\Fansworld\WebBundle\Entity\Video v
    	LEFT JOIN v.author va
    	INNER JOIN v.hastags vht
    	INNER JOIN vht.tag vhtag
    	WHERE v.active = true
    	AND
    	(:tag = vhtag)
    	AND
    	(
    		(v.privacy = :everyone)
    		OR
	    	(v.privacy = :friendsonly AND (:user IS NOT NULL) AND (
	    		(SELECT f.active FROM \Dodici\Fansworld\WebBundle\Entity\Friendship f WHERE (f.author = v.author AND f.target = :user) OR (f.target = v.author AND f.author = :user)) = true
	    	))
    	)
    	ORDER BY v.createdAt DESC
    	')
        	->setParameter('tag', $tag->getId())
        	->setParameter('everyone', Privacy::EVERYONE)
        	->setParameter('friendsonly', Privacy::FRIENDS_ONLY)
        	->setParameter('user', ($user instanceof User) ? $user->getId() : null);
        
        if ($limit !== null)
            $query = $query->setMaxResults((int)$limit);
        if ($offset !== null)
            $query = $query->setFirstResult((int)$offset);
        
        return $query->getResult();
	}
	
	/**
	 * Count videos by text, visible to the user
	 * @param User $user
	 * @param string $searchterm
	 */
	public function countSearchText($searchterm=null, $user=null)
	{
		
		$query = $this->_em->createQuery('
    	SELECT COUNT(v.id)
    	FROM \Dodici\Fansworld\WebBundle\Entity\Video v
    	WHERE v.active = true
    	AND
    	(:searchterm IS NULL OR (
    		(v.title LIKE :searchlike)
    		OR
    		(v.content LIKE :searchlike)
    		OR
    		(v.id IN (SELECT vhtv.id FROM \Dodici\Fansworld\WebBundle\Entity\HasTag vht INNER JOIN vht.video vhtv INNER JOIN vht.tag vhtt WITH vhtt.title = :searchterm))
    	))
    	AND
    	(
    		(v.privacy = :everyone)
    		OR
	    	(v.privacy = :friendsonly AND (:user IS NOT NULL) AND (
	    		(SELECT f.active FROM \Dodici\Fansworld\WebBundle\Entity\Friendship f WHERE (f.author = v.author AND f.target = :user) OR (f.target = v.author AND f.author = :user)) = true
	    	))
    	)
    	')
        	->setParameter('searchterm', $searchterm)
        	->setParameter('searchlike', '%'.$searchterm.'%')
        	->setParameter('everyone', Privacy::EVERYONE)
        	->setParameter('friendsonly', Privacy::FRIENDS_ONLY)
        	->setParameter('user', ($user instanceof User) ? $user->getId() : null);
        
        return $query->getSingleScalarResult();
	}
	
	/**
	 * Count videos by tag, visible to the user
	 * @param User $user
	 * @param Tag $tag
	 */
	public function countByTag(Tag $tag, $user=null)
	{
		
		$query = $this->_em->createQuery('
    	SELECT COUNT(v.id)
    	FROM \Dodici\Fansworld\WebBundle\Entity\Video v
    	INNER JOIN v.hastags vht
    	INNER JOIN vht.tag vhtag
    	WHERE v.active = true
    	AND
    	(:tag = vhtag)
    	AND
    	(
    		(v.privacy = :everyone)
    		OR
	    	(v.privacy = :friendsonly AND (:user IS NOT NULL) AND (
	    		(SELECT f.active FROM \Dodici\Fansworld\WebBundle\Entity\Friendship f WHERE (f.author = v.author AND f.target = :user) OR (f.target = v.author AND f.author = :user)) = true
	    	))
    	)
    	')
        	->setParameter('tag', $tag->getId())
        	->setParameter('everyone', Privacy::EVERYONE)
        	->setParameter('friendsonly', Privacy::FRIENDS_ONLY)
        	->setParameter('user', ($user instanceof User) ? $user->getId() : null);
        
        return $query->getSingleScalarResult();
	}
}